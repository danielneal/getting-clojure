(ns talk.chapter3
    (:require [hoplon.reveal :refer [chapter slide notes bullet highlight n-column-table two-column-table quicklist]]
              [talk.sample-code :as sample-code]))

(defn slides []
  (chapter :title "Reading Clojure: Polymorphism"
           (slide :title "Sequences"
                  (div (highlight "(first coll)")
                       (span :class "doc-string" "Returns the first item in the collection. Calls seq on its argument. If coll is nil, returns nil."))
                  (div (highlight "(rest coll)")
                       (span :class "doc-string" "Returns a sequence of the items after the first. Calls seq on its argument. If there are no more items, returns a logical sequence for which seq returns nil."))
                  (div (highlight "(cons item seq)")
                       (span :class "doc-string" "Returns a new seq where item is the first element and seq is the rest.")))
           (slide :title "Sequence functions"
                  (quicklist
                   "map"
                   "filter"
                   "reduce"
                   "partition"
                   "group-by"
                   "interleave"
                   "take"
                   "drop"
                   "sort"
                   "cycle"
                   "remove"
                   "frequencies"
                   "..."))
           (slide :title "Protocols and Multimethods"
                  (bullet "The Expression Problem")
                  (span :class "doc-string" "(or, how do we add functionality and datatypes without modifying existing code)")
                  (two-column-table :title "Styles, compared"
                   (p "OOP") (p "Easy to add new datatypes, hard to add new functions ")
                   (p "FP") (p "Easy to add new functions, hard to add new datatypes")))
           (slide :title "The Expression Problem: in OOP"
                  (sample-code/the-expression-problem-oop))
           (slide :title "The Expression Problem: in FP"
                  (sample-code/the-expression-problem-functional))
           (slide :title "The Clojure Solution: multimethods"
                  (sample-code/multimethods))
           (slide :title "The other Clojure Solution: protocols"
                  (sample-code/protocols))
           (slide :title "Datastructure revisited"
                  (bullet "All the core datastructures implement IFn")
                  (sample-code/datastructures-as-functions))))


